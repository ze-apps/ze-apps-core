<?php

namespace Zeapps\Core;

use Zeapps\Models\Module;

class Cache
{
    private static $_modules;


    public static function generateCache()
    {
        self::$_modules = Module::where('active', '1')->get();


        if (!is_file(PUBLICPATH . 'cache/js/main.js') || ENVIRONMENT != 'production') {
            self::generateMainJs();
        }

        if (!is_file(PUBLICPATH . 'cache/css/global.css') || ENVIRONMENT != 'production') {
            self::generateGlobalCss();
        }

        if (!is_file(PUBLICPATH . 'cache/js/global.js') || ENVIRONMENT != 'production') {
            self::generateGlobalJs();
        }

        self::copyImages();

        self::generateObserver();
    }


    private static function generateMainJs()
    {
        /*************** génération du fichier main.js dans le cache *************/
        $mainjs = "/*************\n";
        $mainjs .= "*** do not edit this files ***\n";
        $mainjs .= "*** Cache date : " . date("Y-m-d H:i:s") . " ***\n";
        $mainjs .= "*************/\n";


        if (is_file(BASEPATH . "system/angularjs/main.js")) { // We start with the root of our AngularJS application
            $mainjs .= minifyJS(file_get_contents(BASEPATH . "system/angularjs/main.js"));
            $mainjs .= "\n";
        }


        $folderApp = BASEPATH;
        if ($folder = opendir($folderApp)) {
            $folderAngularJs = $folderApp . "system/angularjs";

            $mainjs .= minifyJS(self::getContentFolder($folderAngularJs, 'js'));
        }


        if (self::$_modules && count(self::$_modules)) {
            for ($i = 0; $i < sizeof(self::$_modules); $i++) {
                $folderModule = MODULEPATH . self::$_modules[$i]->module_id;
                if (is_dir($folderModule)) {
                    $folderAngularJs = $folderModule . "/angularjs";

                    $mainjs .= minifyJS(self::getContentFolder($folderAngularJs, 'js'));

                }
            }
        }

        $mainjs = minifyJs($mainjs);

        // ecriture du fichier javascript
        recursive_mkdir(PUBLICPATH . "cache/js/");
        file_put_contents(PUBLICPATH . "cache/js/main.js", $mainjs);
        /*************** END : génération du fichier main.js dans le cache *************/

        return true;
    }

    private static function generateGlobalCss()
    {
        $globalCss = "/************\n";
        $globalCss .= "*** do not edit this files ***\n";
        $globalCss .= "*** Cache date : " . date("Y-m-d H:i:s") . " ***\n";
        $globalCss .= "*************/\n";

        /*************** copie des fichiers css *************/
        $folderApp = BASEPATH;
        if ($folder = opendir($folderApp)) {
            $folderCss = $folderApp . "system/assets/css";

            $globalCss .= minifyCss(self::getContentFolder($folderCss, 'css'));
        }

        if (self::$_modules && count(self::$_modules)) {
            for ($i = 0; $i < count(self::$_modules); $i++) {
                $folderModule = MODULEPATH . self::$_modules[$i]->module_id;
                if (is_dir($folderModule)) {
                    $folderCss = $folderModule . "/assets/css";

                    $globalCss .= minifyCss(self::getContentFolder($folderCss, 'css'));

                }
            }
        }
        /*************** END : copie des fichiers css *************/

        recursive_mkdir(PUBLICPATH . "cache/css/");
        file_put_contents(PUBLICPATH . "cache/css/global.css", $globalCss);

        return true;
    }

    private static function generateGlobalJs()
    {
        $globalJs = "/************\n";
        $globalJs .= "*** do not edit this files ***\n";
        $globalJs .= "*** Cache date : " . date("Y-m-d H:i:s") . " ***\n";
        $globalJs .= "*************/\n";

        /*************** copie des fichiers css *************/
        $folderApp = BASEPATH;
        if ($folder = opendir($folderApp)) {
            $folderCss = $folderApp . "system/assets/js";

            $globalJs .= self::getContentFolder($folderCss, 'js');
        }

        if (self::$_modules && count(self::$_modules)) {
            for ($i = 0; $i < count(self::$_modules); $i++) {
                $folderModule = MODULEPATH . self::$_modules[$i]->module_id;
                if (is_dir($folderModule)) {
                    $folderCss = $folderModule . "/assets/js";

                    $globalJs .= self::getContentFolder($folderCss, 'js');

                }
            }
        }
        /*************** END : copie des fichiers css *************/

        recursive_mkdir(PUBLICPATH . "cache/js/");
        file_put_contents(PUBLICPATH . "cache/js/global.js", $globalJs);

        return true;
    }

    private static function copyImages()
    {
        /*************** copie des fichiers images *************/
        $folderItem = 'system';
        $folderImagesFile = BASEPATH . $folderItem . '/assets/images';
        if (is_dir($folderImagesFile)) {
            $folderImagesFile .= "/";
            if ($folderJS = opendir($folderImagesFile)) {
                while (false !== ($folderItemImage = readdir($folderJS))) {
                    $fileJS = $folderImagesFile . $folderItemImage;
                    if (is_file($fileJS) && $folderItemImage != '.'
                        && $folderItemImage != '..'
                        && (
                            str_ends_with($folderItemImage, ".png")
                            || str_ends_with($folderItemImage, ".jpg")
                            || str_ends_with($folderItemImage, ".gif")
                        )
                    ) {
                        // creation du dossier d'accueil
                        recursive_mkdir(PUBLICPATH . "cache/images/" . $folderItem);

                        // copie du fichier
                        $destination = PUBLICPATH . "cache/images/" . $folderItem . "/" . $folderItemImage;
                        copy($fileJS, $destination);
                    }
                }
            }
        }


        if (self::$_modules && count(self::$_modules)) {
            $folderApp = MODULEPATH;
            if ($folder = opendir($folderApp)) {
                for ($i = 0; $i < sizeof(self::$_modules); $i++) {
                    $folderModule = $folderApp . self::$_modules[$i]->module_id;
                    if (is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                        $folderImagesFile = $folderModule . "/assets/images";
                        if (is_dir($folderImagesFile)) {
                            $folderImagesFile .= "/";
                            if ($folderJS = opendir($folderImagesFile)) {
                                while (false !== ($folderItemImage = readdir($folderJS))) {
                                    $fileJS = $folderImagesFile . $folderItemImage;
                                    if (is_file($fileJS) && $folderItemImage != '.'
                                        && $folderItemImage != '..'
                                        && (
                                            str_ends_with($folderItemImage, ".png")
                                            || str_ends_with($folderItemImage, ".jpg")
                                            || str_ends_with($folderItemImage, ".gif")
                                        )
                                    ) {
                                        // creation du dossier d'accueil
                                        recursive_mkdir(PUBLICPATH . "cache/images/" . $folderItem);

                                        // copie du fichier
                                        $destination = PUBLICPATH . "cache/images/" . $folderItem . "/" . $folderItemImage;
                                        copy($fileJS, $destination);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        /*************** END : copie des fichiers images *************/
    }

    private static function generateObserver()
    {

        $observers = array();

        $countClass = 0 ;
        if (self::$_modules && count(self::$_modules)) {
            for ($i = 0; $i < count(self::$_modules); $i++) {
                $folderModule = MODULEPATH . self::$_modules[$i]->module_id;
                if (is_dir($folderModule)) {
                    $folderObserver = $folderModule . "/Observer/";


                    if (is_dir($folderObserver)) {
                        if ($folderOpen = opendir($folderObserver)) {
                            while (false !== ($folderItem = readdir($folderOpen))) {
                                $file = $folderObserver . $folderItem;
                                if (is_file($file) && $folderItem != '.' && $folderItem != '..'
                                    && str_ends_with($folderItem, ".php")
                                ) {

                                    $nomClass = substr($folderItem, 0, strrpos($folderItem, "."));

                                    $countClass++;
                                    $observers[] = array('App\\' . self::$_modules[$i]->module_id . '\\Observer', $nomClass, $countClass);
                                }
                            }
                        }
                    }
                }
            }
        }



        // System Folder
        $folderObserver = BASEPATH . "system/Observer/";
        if (is_dir($folderObserver)) {
            if ($folderOpen = opendir($folderObserver)) {
                while (false !== ($folderItem = readdir($folderOpen))) {
                    $file = $folderObserver . $folderItem;
                    if (is_file($file) && $folderItem != '.' && $folderItem != '..'
                        && str_ends_with($folderItem, ".php")
                    ) {

                        $nomClass = substr($folderItem, 0, strrpos($folderItem, "."));

                        $countClass++;
                        $observers[] = array('Zeapps\\Observer', $nomClass, $countClass);
                    }
                }
            }
        }






        $contentObserver = "<?php\n\n";


        $contentObserver .= "namespace Cache;\n\n";


        if (count($observers)) {
            foreach ($observers as $observer) {
                $contentObserver .= "use " . $observer[0] . "\\" . $observer[1] . " as ClassObserver_" . $observer[2] . " ;\n";
            }
        }


        $contentObserver .= "\nclass ObserverCache {\n";
        $contentObserver .= "    public static function getObserver() {\n";
        $contentObserver .= "        return array(\n";

        if (count($observers)) {
            foreach ($observers as $observer) {
                $contentObserver .= "            new ClassObserver_" . $observer[2] . ",\n";
            }
        }

        $contentObserver .= "        ) ;\n";
        $contentObserver .= "    }\n";
        $contentObserver .= "}\n";


        recursive_mkdir(BASEPATH . "cache/");
        file_put_contents(BASEPATH . "cache/ObserverCache.php", $contentObserver);
    }

    private static function getContentFolder($folder, $ext)
    {
        $valRetour = "";

        if (is_dir($folder)) {
            $folder .= "/";
            if ($folderOpen = opendir($folder)) {
                while (false !== ($folderItem = readdir($folderOpen))) {
                    $file = $folder . $folderItem;
                    if (is_file($file) && $folderItem != '.' && $folderItem != '..'
                        && str_ends_with($folderItem, "." . $ext) && $folderItem != 'main.js'
                    ) {
                        $valRetour .= file_get_contents($file);
                        $valRetour .= "\n";
                    } elseif (is_dir($file) && $folderItem != '.' && $folderItem != '..') {
                        $valRetour .= self::getContentFolder($file, $ext);
                    }
                }
            }
        }

        return $valRetour;
    }
}